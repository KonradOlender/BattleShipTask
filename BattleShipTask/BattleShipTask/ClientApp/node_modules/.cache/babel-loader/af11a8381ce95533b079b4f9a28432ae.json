{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\konra\\\\Source\\\\Repos\\\\BattleShipTask\\\\BattleShipTask\\\\BattleShipTask\\\\ClientApp\\\\src\\\\components\\\\BattleShip.js\";\nimport React, { Component } from 'react';\nimport { render } from 'react-dom';\nexport class Battleship extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      gridSquares: [],\n      gridHit: [],\n      shipsSquares: [],\n      grid2: [],\n      gridSquares2: [],\n      shipsSquares2: [],\n      loading: true,\n      gameOver: false,\n      gameOver2: false,\n      playerturn: 1\n    };\n    this.nextShot = this.nextShot.bind(this);\n    this.getGridData = this.getGridData.bind(this);\n  }\n\n  componentDidMount() {\n    this.getGridData();\n  }\n\n  static renderTd(row, gridrow, hit, occupied) {\n    const square = {\n      color: 'blue',\n      height: 50,\n      width: 50,\n      backgroundColor: '#52D9E1',\n      borderStyle: 'solid',\n      borderWidth: 2,\n      borderColor: 'white'\n    };\n    const red = {\n      color: 'res',\n      height: 50,\n      width: 50,\n      backgroundColor: 'red',\n      borderStyle: 'solid',\n      borderWidth: 2,\n      borderColor: 'white'\n    };\n    const purple = {\n      color: 'res',\n      height: 50,\n      width: 50,\n      backgroundColor: 'purple',\n      borderStyle: 'solid',\n      borderWidth: 2,\n      borderColor: 'white'\n    };\n    const grey = {\n      color: 'res',\n      height: 50,\n      width: 50,\n      backgroundColor: 'gray',\n      borderStyle: 'solid',\n      borderWidth: 2,\n      borderColor: 'white'\n    };\n\n    if (gridrow === row) {\n      if (hit && occupied === false) {\n        return /*#__PURE__*/React.createElement(\"td\", {\n          style: red,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 21\n          }\n        });\n      } else if (hit && occupied === true) {\n        return /*#__PURE__*/React.createElement(\"td\", {\n          style: purple,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 21\n          }\n        });\n      } else if (occupied) {\n        return /*#__PURE__*/React.createElement(\"td\", {\n          style: grey,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 21\n          }\n        });\n      } else {\n        return /*#__PURE__*/React.createElement(\"td\", {\n          style: square,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 21\n          }\n        });\n      }\n    }\n  }\n\n  static renderGridTable(grids, grids2) {\n    const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        padding: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }\n    }, \" player 1 board \"), /*#__PURE__*/React.createElement(\"table\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 33\n      }\n    }, grids.map(square => Battleship.renderTd(1, square.y, square.hit, square.occupied)))))), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        padding: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 21\n      }\n    }, \" player 2 board \"), /*#__PURE__*/React.createElement(\"table\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 25\n      }\n    }, numbers.map(row => /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 33\n      }\n    }, grids2.map(square => Battleship.renderTd(row, square.y, square.hit, square.occupied))))))));\n  }\n\n  render() {\n    let contents = this.state.loading ? /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"em\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 20\n      }\n    }, \" Loading...\")) : Battleship.renderGridTable(this.state.gridSquares, this.state.gridSquares2);\n\n    if (this.state.gameOver === true) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        id: \"tabelLabel\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }\n      }, \" BattleShip Game \"), /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 21\n        }\n      }, \" GameOver: Player Two Win \"), contents, /*#__PURE__*/React.createElement(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: this.getGridData,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }\n      }, \" Rest Grid \"));\n    } else if (this.state.gameOver2 === true) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        id: \"tabelLabel\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }\n      }, \" BattleShip Game \"), /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 21\n        }\n      }, \" GameOver: Player Two Win \"), contents, /*#__PURE__*/React.createElement(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: this.getGridData,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }\n      }, \" Rest Grid \"));\n    } else {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        id: \"tabelLabel\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 25\n        }\n      }, \" BattleShip Game \"), contents), /*#__PURE__*/React.createElement(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: this.nextShot,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 21\n        }\n      }, \" Next Shot \"), /*#__PURE__*/React.createElement(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: this.getGridData,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 21\n        }\n      }, \" Rest Grid \"));\n    }\n  }\n\n  async nextShot() {\n    if (this.state.playerturn === 1) {\n      const response = await fetch('nextshotgridinfo');\n      const data = await response.json();\n      this.setState({\n        grid: data\n      });\n      this.setState({\n        gridSquares: this.state.grid.grid\n      });\n      this.setState({\n        gridHit: this.state.grid.hitSquares\n      });\n      this.setState({\n        shipsSquares: this.state.grid.shipsSquares\n      });\n      this.setState({\n        gameOver: this.state.grid.gameOver\n      });\n      this.setState({\n        playerturn: 2\n      });\n    } else {\n      const response = await fetch('nextshotgridinfo2');\n      const data = await response.json();\n      this.setState({\n        grid2: data\n      });\n      this.setState({\n        gridSquares2: this.state.grid2.grid\n      });\n      this.setState({\n        shipsSquares2: this.state.grid2.shipsSquares\n      });\n      this.setState({\n        gameOver2: this.state.grid2.gameOver\n      });\n      this.setState({\n        playerturn: 1\n      });\n    }\n\n    {\n      console.log(this.state.shipsSquares);\n    }\n    {\n      console.log(this.state.gridHit);\n    }\n  }\n\n  async getGridData() {\n    const response = await fetch('gridinfo');\n    const data = await response.json();\n    this.setState({\n      grid: data,\n      loading: false\n    });\n    this.setState({\n      gridSquares: this.state.grid.grid\n    });\n    this.setState({\n      shipsSquares: this.state.grid.shipsSquares\n    });\n    this.setState({\n      gameOver: this.state.grid.gameOver\n    });\n    const response2 = await fetch('gridinfo2');\n    const data2 = await response2.json();\n    this.setState({\n      grid2: data2,\n      loading: false\n    });\n    this.setState({\n      gridSquares2: this.state.grid2.grid\n    });\n    this.setState({\n      shipsSquares2: this.state.grid2.shipsSquares\n    });\n    this.setState({\n      gameOver2: this.state.grid2.gameOver\n    });\n  }\n\n}\nBattleship.displayName = Battleship.name;","map":{"version":3,"sources":["C:/Users/konra/Source/Repos/BattleShipTask/BattleShipTask/BattleShipTask/ClientApp/src/components/BattleShip.js"],"names":["React","Component","render","Battleship","constructor","props","state","grid","gridSquares","gridHit","shipsSquares","grid2","gridSquares2","shipsSquares2","loading","gameOver","gameOver2","playerturn","nextShot","bind","getGridData","componentDidMount","renderTd","row","gridrow","hit","occupied","square","color","height","width","backgroundColor","borderStyle","borderWidth","borderColor","red","purple","grey","renderGridTable","grids","grids2","numbers","padding","map","y","contents","response","fetch","data","json","setState","hitSquares","console","log","response2","data2","displayName","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { render }\r\n    from 'react-dom';\r\n\r\nexport class Battleship extends Component {\r\n    static displayName = Battleship.name;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { grid: [], gridSquares: [], gridHit:[], shipsSquares: [], grid2: [], gridSquares2: [], shipsSquares2: [], loading: true, gameOver: false, gameOver2: false, playerturn: 1 }\r\n        this.nextShot = this.nextShot.bind(this)\r\n        this.getGridData = this.getGridData.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getGridData()\r\n    }\r\n\r\n\r\n    static renderTd(row, gridrow, hit, occupied) {\r\n        const square = {\r\n            color: 'blue',\r\n            height: 50,\r\n            width: 50,\r\n            backgroundColor: '#52D9E1',\r\n            borderStyle: 'solid',\r\n            borderWidth: 2,\r\n            borderColor: 'white',\r\n        }\r\n        const red = {\r\n            color: 'res',\r\n            height: 50,\r\n            width: 50,\r\n            backgroundColor: 'red',\r\n            borderStyle: 'solid',\r\n            borderWidth: 2,\r\n            borderColor: 'white',\r\n        }\r\n        const purple = {\r\n            color: 'res',\r\n            height: 50,\r\n            width: 50,\r\n            backgroundColor: 'purple',\r\n            borderStyle: 'solid',\r\n            borderWidth: 2,\r\n            borderColor: 'white',\r\n        }\r\n        const grey = {\r\n            color: 'res',\r\n            height: 50,\r\n            width: 50,\r\n            backgroundColor: 'gray',\r\n            borderStyle: 'solid',\r\n            borderWidth: 2,\r\n            borderColor: 'white',\r\n        }\r\n        if (gridrow === row) {\r\n            if (hit && occupied === false) {\r\n                return (\r\n\r\n                    < td style={red}></ td >\r\n                )\r\n            }\r\n            else if (hit && occupied === true) {\r\n                return (\r\n\r\n                    < td style={purple}></ td >\r\n                )\r\n            }\r\n            else if (occupied) {\r\n                return (\r\n\r\n                    < td style={grey}></ td >\r\n                )\r\n            }\r\n            else {\r\n                return (\r\n\r\n                    < td style={square}></ td >\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    static renderGridTable(grids, grids2) {\r\n        const numbers = [1,2,3,4,5,6,7,8,9,10]\r\n        return (\r\n            < div className='row' >\r\n\r\n                < div style={{ padding: 10 }}>\r\n\r\n                    < h3 > player 1 board </ h3 >\r\n\r\n                    < table >\r\n\r\n                        < thead >\r\n\r\n                        </ thead >\r\n\r\n                        < tbody >\r\n                                < tr >\r\n                                    {\r\n                                        grids.map(square =>\r\n                                            Battleship.renderTd(1, square.y, square.hit, square.occupied)\r\n                                        )}\r\n                                </ tr >\r\n\r\n                        </ tbody >\r\n                    </ table >\r\n                </ div >\r\n\r\n                < div style={{ padding: 10 }}>\r\n\r\n                    < h3 > player 2 board </ h3 >\r\n\r\n                    < table >\r\n\r\n                        < thead >\r\n\r\n                        </ thead >\r\n\r\n                        < tbody >\r\n\r\n                            {numbers.map(row =>\r\n                                < tr >\r\n                                    {\r\n                                        grids2.map(square =>\r\n                                            Battleship.renderTd(row, square.y, square.hit, square.occupied)\r\n                                        )}\r\n                                </ tr >\r\n                            )}\r\n                        </ tbody >\r\n                    </ table >\r\n                </ div >\r\n            </ div >\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let contents = this.state.loading\r\n            ? < p >< em > Loading...</ em ></ p >\r\n            : Battleship.renderGridTable(this.state.gridSquares, this.state.gridSquares2);\r\n\r\n        if (this.state.gameOver === true) {\r\n            return (\r\n\r\n                < div >\r\n\r\n                    < h1 id=\"tabelLabel\" > BattleShip Game </ h1 >\r\n                    < h1 > GameOver: Player Two Win </ h1 >\r\n                    { contents}\r\n                    < button className=\"btn btn-primary\" onClick={this.getGridData}> Rest Grid </ button >\r\n                </ div >\r\n            )\r\n        }\r\n        else if (this.state.gameOver2 === true) {\r\n            return (\r\n\r\n                < div >\r\n\r\n                    < h1 id=\"tabelLabel\" > BattleShip Game </ h1 >\r\n                    < h1 > GameOver: Player Two Win </ h1 >\r\n                    { contents}\r\n                    < button className=\"btn btn-primary\" onClick={this.getGridData}> Rest Grid </ button >\r\n                </ div >\r\n            )\r\n        }\r\n\r\n        else {\r\n            return (\r\n\r\n                <>\r\n\r\n                    < div >\r\n\r\n                        < h1 id=\"tabelLabel\" > BattleShip Game </ h1 >\r\n                        {contents}\r\n                    </ div >\r\n                    < button className=\"btn btn-primary\" onClick={this.nextShot}> Next Shot </ button >\r\n                    < button className=\"btn btn-primary\" onClick={this.getGridData}> Rest Grid </ button >\r\n\r\n                </>\r\n            )\r\n        }\r\n    }\r\n\r\n    async nextShot() {\r\n        if (this.state.playerturn === 1) {\r\n            const response = await fetch('nextshotgridinfo');\r\n            const data = await response.json();\r\n            this.setState({ grid: data });\r\n            this.setState({ gridSquares: this.state.grid.grid });\r\n            this.setState({ gridHit: this.state.grid.hitSquares });\r\n            this.setState({ shipsSquares: this.state.grid.shipsSquares });\r\n            this.setState({ gameOver: this.state.grid.gameOver });\r\n            this.setState({ playerturn: 2 })\r\n        }\r\n        else {\r\n            const response = await fetch('nextshotgridinfo2');\r\n            const data = await response.json();\r\n            this.setState({ grid2: data });\r\n            this.setState({ gridSquares2: this.state.grid2.grid });\r\n            this.setState({ shipsSquares2: this.state.grid2.shipsSquares });\r\n            this.setState({ gameOver2: this.state.grid2.gameOver });\r\n            this.setState({ playerturn: 1 })\r\n        }\r\n\r\n        { console.log(this.state.shipsSquares) }\r\n        { console.log(this.state.gridHit) }\r\n    }\r\n\r\n    async getGridData() {\r\n        const response = await fetch('gridinfo');\r\n        const data = await response.json();\r\n        this.setState({ grid: data, loading: false });\r\n        this.setState({ gridSquares: this.state.grid.grid });\r\n        this.setState({ shipsSquares: this.state.grid.shipsSquares });\r\n        this.setState({ gameOver: this.state.grid.gameOver });\r\n\r\n        const response2 = await fetch('gridinfo2');\r\n        const data2 = await response2.json();\r\n        this.setState({ grid2: data2, loading: false });\r\n        this.setState({ gridSquares2: this.state.grid2.grid });\r\n        this.setState({ shipsSquares2: this.state.grid2.shipsSquares });\r\n        this.setState({ gameOver2: this.state.grid2.gameOver });\r\n\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}